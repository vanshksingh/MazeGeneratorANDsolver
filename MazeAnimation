import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.Timer;
import java.util.TimerTask;

public class MazeAnimation extends JPanel {
    private int[][] maze;
    private int rows;
    private int cols;

    private int cellSize = 20;
    private int currentX, currentY;

    private Timer generationTimer;
    private Timer solvingTimer;
    private boolean generationComplete;
    private boolean solvingComplete;

    private ArrayList<Point> visitedCells;
    private ArrayList<Point> path;

    private Random random;

    public MazeAnimation(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        this.maze = new int[rows][cols];

        generationComplete = false;
        solvingComplete = false;
        visitedCells = new ArrayList<>();
        path = new ArrayList<>();
        random = new Random();

        setPreferredSize(new Dimension(cols * cellSize, rows * cellSize));

        generationTimer = new Timer();
        solvingTimer = new Timer();

        generationTimer.schedule(new MazeGenerationTask(), 0, 50); // Adjust the delay for animation speed
    }

    public void generateMaze() {
        if (!generationComplete) {
            // Implement Wilson's algorithm for maze generation
            if (visitedCells.isEmpty()) {
                // Start a random walk from a random cell
                int startX = random.nextInt(cols);
                int startY = random.nextInt(rows);
                visitedCells.add(new Point(startX, startY));
                currentX = startX;
                currentY = startY;
                maze[currentY][currentX] = 1; // Mark the cell as visited
            } else {
                // Continue the random walk
                ArrayList<Point> unvisitedNeighbors = getUnvisitedNeighbors(currentX, currentY);
                if (!unvisitedNeighbors.isEmpty()) {
                    // Choose a random unvisited neighbor
                    Point neighbor = unvisitedNeighbors.get(random.nextInt(unvisitedNeighbors.size()));
                    // Remove the wall between the current cell and the chosen neighbor
                    maze[neighbor.y][neighbor.x] = 1;
                    // Mark the chosen neighbor as visited
                    visitedCells.add(neighbor);
                    currentX = neighbor.x;
                    currentY = neighbor.y;
                } else {
                    // Random walk finished, remove the path from the visited cells
                    visitedCells.remove(visitedCells.size() - 1);
                }
            }

            if (visitedCells.isEmpty()) {
                generationComplete = true; // Maze generation is complete
            }
        } else {
            generationTimer.cancel();
            solvingComplete = false;
            solvingTimer.schedule(new MazeSolvingTask(), 1000, 50); // Start solving after a delay
        }
    }

    public void solveMaze() {
        if (!solvingComplete) {
            // Implement Depth-First Search for maze solving
            // You can start solving from any point and mark the path as you find it
            // For a simple example, let's mark a path from the top-left corner to the bottom-right corner
            int endX = cols - 1;
            int endY = rows - 1;
            path = depthFirstSearch(currentX, currentY, endX, endY);
            solvingComplete = true;
        } else {
            solvingTimer.cancel();
        }
    }

    private ArrayList<Point> depthFirstSearch(int startX, int startY, int endX, int endY) {
        // Implement Depth-First Search here
        // Return a list of points representing the path
        // This is a simplified example, you can expand this method
        ArrayList<Point> result = new ArrayList<>();
        int x = startX;
        int y = startY;
        while (x != endX || y != endY) {
            if (x < endX) {
                x++;
            } else if (x > endX) {
                x--;
            } else if (y < endY) {
                y++;
            } else if (y > endY) {
                y--;
            }
            result.add(new Point(x, y));
        }
        return result;
    }

    private ArrayList<Point> getUnvisitedNeighbors(int x, int y) {
        ArrayList<Point> neighbors = new ArrayList<>();
        int[][] moves = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int[] move : moves) {
            int newX = x + move[0];
            int newY = y + move[1];
            if (newX >= 0 && newX < cols && newY >= 0 && newY < rows && maze[newY][newX] == 0) {
                neighbors.add(new Point(newX, newY));
            }
        }
        return neighbors;
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (maze[i][j] == 1) {
                    g.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
                }
            }
        }

        g.setColor(Color.BLUE);
        for (Point point : path) {
            g.fillRect(point.x * cellSize, point.y * cellSize, cellSize, cellSize);
        }
    }

    private class MazeGenerationTask extends TimerTask {
        @Override
        public void run() {
            generateMaze();
            repaint();
        }
    }

    private class MazeSolvingTask extends TimerTask {
        @Override
        public void run() {
            solveMaze();
            repaint();
        }
    }

    private boolean generationComplete() {
        return generationComplete;
    }

    private boolean solvingComplete() {
        return solvingComplete;
    }

    public static void main(String[] args) {
        int mazeRows = 41;
        int mazeCols = 41;

        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Maze Generation and Solving Animation");
            MazeAnimation mazeAnimation = new MazeAnimation(mazeRows, mazeCols);
            frame.add(mazeAnimation);
            frame.pack();
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);
        });
    }
}
