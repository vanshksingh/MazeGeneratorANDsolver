import java.awt.*;
import javax.swing.*;
import java.util.Random;

public class Maze extends JPanel implements Runnable {

    public static void main(String[] args) {
        JFrame window = new JFrame("Maze Solver");
        window.setContentPane(new Maze());
        window.pack();
        window.setLocation(120, 80);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setVisible(true);
    }

    int[][] maze;
    final static int backgroundCode = 0;
    final static int wallCode = 1;
    final static int pathCode = 2;
    final static int emptyCode = 3;
    final static int visitedCode = 4;
    Color[] colors;
    int rows = 41;
    int columns = 51;
    int border = 0;
    int sleepTime = 5000;
    int speedSleep = 30;
    int blockSize = 12;
    int width = -1;
    int height = -1;
    int totalWidth;
    int totalHeight;
    int left;
    int top;
    boolean mazeExists = false;
    boolean solving = false;

    public Maze() {
        colors = generateMazeColors();
        setBackground(colors[backgroundCode]);
        setPreferredSize(new Dimension(blockSize * columns, blockSize * rows));
        new Thread(this).start();
    }

    // Helper method to generate luxurious colors with correct contrast
    // Helper method to generate luxurious colors with contrast
    Color[] generateMazeColors() {
        Color[][] colorPalettes = new Color[][] {
                {
                        // Background Color (Dark)
                        new Color(0x222222),
                        // Wall Color (Light)
                        new Color(0xFFFFFF),
                        // Empty Space Color (Dark)
                        new Color(0x222222),
                        // Path Color (Inverse of Wall)
                        new Color(0xF3A963),  // Inverse of white (black)
                        // Visited Path Color (Darker version of Path)
                        new Color(0xDC6606)  // A slightly darker shade of black
                },
                {
                        // Background Color (Dark Gray)
                        new Color(0x444444),
                        // Wall Color (Light Gray)
                        new Color(0xDDDDDD),
                        // Empty Space Color (Dark Gray)
                        new Color(0x444444),
                        // Path Color (Inverse of Wall)
                        new Color(0x06A6A6),  // A darker shade of gray
                        // Visited Path Color (Darker version of Path)
                        new Color(0x056565)  // A slightly darker shade of gray
                },
                {
                        // Background Color (Navy Blue)
                        new Color(0x000080),
                        // Wall Color (Light Blue)
                        new Color(0x87CEEB),
                        // Empty Space Color (Navy Blue)
                        new Color(0x000080),
                        // Path Color (Inverse of Wall)
                        new Color(0x53EA8C),  // A darker shade of blue
                        // Visited Path Color (Darker version of Path)
                        new Color(0x308650)  // A slightly darker shade of blue
                },
                {
                        // Background Color (Dark Green)
                        new Color(0x28324A),
                        // Wall Color (Light Green)
                        new Color(0xF0D543),
                        // Empty Space Color (Dark Green)
                        new Color(0x28324A),
                        // Path Color (Inverse of Wall)
                        new Color(0xEC4F57),  // A darker shade of green
                        // Visited Path Color (Darker version of Path)
                        new Color(0x8C3033)  // A slightly darker shade of green
                },
                {
                        // Background Color (Dark Red)
                        new Color(0xF33D9F),
                        // Wall Color (Light Red)
                        new Color(0xACE964),
                        // Empty Space Color (Dark Red)
                        new Color(0xF33D9F),
                        // Path Color (Inverse of Wall)
                        new Color(0x039DC6),  // A darker shade of red
                        // Visited Path Color (Darker version of Path)
                        new Color(0x02617A)  // A slightly darker shade of red
                }
                // Add more color palettes here
        };

        Random random = new Random();
        int randomPaletteIndex = random.nextInt(colorPalettes.length);
        return colorPalettes[randomPaletteIndex];
    }


    Color generateContrastingColor(Color background) {
        Random random = new Random();
        int red = random.nextInt(256);
        int green = random.nextInt(256);
        int blue = random.nextInt(256);

        Color foreground = new Color(red, green, blue);

        // Ensure sufficient contrast
        if (getContrastRatio(background, foreground) < 4.5) {
            return generateContrastingColor(background);
        }

        return foreground;
    }

    double getContrastRatio(Color color1, Color color2) {
        // Calculate contrast ratio (as per W3C standards)
        int l1 = getLuminance(color1);
        int l2 = getLuminance(color2);
        return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);
    }

    int getLuminance(Color color) {
        // Calculate relative luminance (as per W3C standards)
        int red = color.getRed();
        int green = color.getGreen();
        int blue = color.getBlue();
        return (int) (0.299 * red + 0.587 * green + 0.114 * blue);
    }

    void checkSize() {
        if (getWidth() != width || getHeight() != height) {
            width = getWidth();
            height = getHeight();
            int w = (width - 2 * border) / columns;
            int h = (height - 2 * border) / rows;
            left = (width - w * columns) / 2;
            top = (height - h * rows) / 2;
            totalWidth = w * columns;
            totalHeight = h * rows;
        }
    }

    synchronized protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        checkSize();
        redrawMaze(g);
    }

    void redrawMaze(Graphics g) {
        if (mazeExists) {
            int w = totalWidth / columns;
            int h = totalHeight / rows;
            for (int j = 0; j < columns; j++) {
                for (int i = 0; i < rows; i++) {
                    if (maze[i][j] < 0) {
                        g.setColor(colors[emptyCode]);
                    } else {
                        g.setColor(colors[maze[i][j]]);
                    }
                    g.fillRect((j * w) + left, (i * h) + top, w, h);
                }
            }
        }
    }


    public void run() {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        while (true) {
            makeMaze();
            solving = true;
            boolean solved = solveMaze(1, 1);
            solving = false;
            if (solved) {
                synchronized (this) {
                    try {
                        Thread.sleep(sleepTime);
                    } catch (InterruptedException e) {
                    }
                }
            }
            mazeExists = false;
            repaint();
        }
    }

    void makeMaze() {
        if (maze == null)
            maze = new int[rows][columns];
        int i, j;
        int emptyCt = 0;
        int wallCt = 0;
        int[] wallrow = new int[(rows * columns) / 2];
        int[] wallcol = new int[(rows * columns) / 2];
        for (i = 0; i < rows; i++)
            for (j = 0; j < columns; j++)
                maze[i][j] = wallCode;
        for (i = 1; i < rows - 1; i += 2)
            for (j = 1; j < columns - 1; j += 2) {
                emptyCt++;
                maze[i][j] = -emptyCt;
                if (i < rows - 2) {
                    wallrow[wallCt] = i + 1;
                    wallcol[wallCt] = j;
                    wallCt++;
                }
                if (j < columns - 2) {
                    wallrow[wallCt] = i;
                    wallcol[wallCt] = j + 1;
                    wallCt++;
                }
            }
        mazeExists = true;
        repaint();
        int r;
        for (i = wallCt - 1; i > 0; i--) {
            r = (int) (Math.random() * i);
            tearDown(wallrow[r], wallcol[r]);
            wallrow[r] = wallrow[i];
            wallcol[r] = wallcol[i];
        }
        for (i = 1; i < rows - 1; i++)
            for (j = 1; j < columns - 1; j++)
                if (maze[i][j] < 0)
                    maze[i][j] = emptyCode;
    }

    synchronized void tearDown(int row, int col) {
        if (row % 2 == 1 && maze[row][col - 1] != maze[row][col + 1]) {
            fill(row, col - 1, maze[row][col - 1], maze[row][col + 1]);
            maze[row][col] = maze[row][col + 1];
            repaint();
            try {
                Thread.sleep(speedSleep);
            } catch (InterruptedException e) {
            }
        } else if (row % 2 == 0 && maze[row - 1][col] != maze[row + 1][col]) {
            fill(row - 1, col, maze[row - 1][col], maze[row + 1][col]);
            maze[row][col] = maze[row + 1][col];
            repaint();
            try {
                Thread.sleep(speedSleep);
            } catch (InterruptedException e) {
            }
        }
    }

    void fill(int row, int col, int replace, int replaceWith) {
        if (maze[row][col] == replace) {
            maze[row][col] = replaceWith;
            fill(row + 1, col, replace, replaceWith);
            fill(row - 1, col, replace, replaceWith);
            fill(row, col + 1, replace, replaceWith);
            fill(row, col - 1, replace, replaceWith);
        }
    }

    boolean solveMaze(int row, int col) {
        if (maze[row][col] == emptyCode) {
            maze[row][col] = pathCode;
            repaint();
            try {
                Thread.sleep(speedSleep);
            } catch (InterruptedException e) {
            }
            if (row == rows - 2 && col == columns - 2)
                return true;
            if (solveMaze(row - 1, col) || solveMaze(row, col - 1) || solveMaze(row + 1, col) || solveMaze(row, col + 1)) {
                return true;
            }
            maze[row][col] = visitedCode;
            repaint();
            try {
                Thread.sleep(speedSleep);
            } catch (InterruptedException e) {
            }
        }
        return false;
    }
}
